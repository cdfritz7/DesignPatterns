Singleton Design Pattern

---------------------------------
Description
---------------------------------
The Singleton Design Pattern is a simple design pattern that restricts the
instantiation of a class to a single object. It is used when only a single object is
needed to coordinate actions across a system. We provide eager and lazy
implementations of the Singleton Design Pattern. In eager instantiatation,
the single object is created on application startup. In lazy instantiation,
the single object is created when only when first requested.

---------------------------------
Provided Application
---------------------------------
The Singleton Design Pattern is often useful for building loggers, as there
should only be a single logger shared within an application. As an example
of an application using the Singleton Design Pattern, we have provided two
classes. These classes perform simple outputs, and log their activities with a
shared logger. Each class can use either the lazy or the eager Singleton
implementations. The "main.py" files in the "complete" and "empty" subdirectories
create instantiations of each class, call their methods, and check the logger
output.

---------------------------------
Filling Out the Incomplete Solution
---------------------------------
In the "empty" directory there are three python3 files. SingletonEager.py and
SingletonLazy.py contain comments providing small explanations about what to
do to complete the lazy and eager singleton classes.

---------------------------------
Checking Solution
---------------------------------
In the "empty" directory there is another python3 file, "main.py".
"main.py" runs a simple test of both the lazy and eager singleton classes.

Alternatively, the "complete" directory contains functional eager and lazy
singleton classes, and an identical "main.py" file.
